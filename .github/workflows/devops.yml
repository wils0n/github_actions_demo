name: CI básico Python + Bash
run-name: "CI disparado por ${{ github.actor }}"

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # JOB 1: Validación (Python) — corre en Ubuntu hospedado por GitHub
  test:
    runs-on: ubuntu-latest
    steps:
      # STEP: Trae el código al runner
      - name: Checkout
        uses: actions/checkout@v4

      # STEP: Configura Python (action oficial)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # STEP: (Opcional) Cache de dependencias para acelerar
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ runner.os }}-

      # STEP: Instala dependencias (Bash)
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # STEP: Ejecuta pruebas (Bash llamando a Python)
      - name: Run tests
        run: pytest -q

      # STEP: Crear un “output” del job usando GITHUB_OUTPUT (Bash)
      - name: Compute build tag
        id: meta
        run: |
          TS=$(date +%Y%m%d-%H%M%S)
          echo "tag=${TS}-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      # STEP: Publicar un artefacto con el reporte (ejemplo)
      - name: Save artifact (sample log)
        run: echo "Build tag: ${{ steps.meta.outputs.tag }}" > build-info.txt
      - uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build-info.txt

  # JOB 2: Empaquetado (Bash) — depende del job de tests (secuencial)
  package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # STEP: Usar el output del job anterior
      - name: Read tag from previous job
        run: echo "TAG = ${{ needs.test.outputs.meta_tag }}"
        env:
          # Exponemos el output del step meta como output de job usando needs.<job>.outputs.<name>
          # Para eso definimos outputs del job test abajo (ver 'outputs:' en job test)
          TAG: ${{ needs.test.outputs.build_tag }}

      # STEP: Crear artefacto zip (Bash puro)
      - name: Create zip
        run: |
          mkdir -p dist
          cp hello.py dist/
          zip -r "dist/app-${{ needs.test.outputs.build_tag }}.zip" dist

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: app-zip
          path: dist/*.zip

  # JOB 3: Tareas rápidas en paralelo (Bash) — NO depende de nadie
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Echo info (Bash)
        run: |
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Evento: $GITHUB_EVENT_NAME"
          echo "Runner: $RUNNER_OS"
